# -*- coding: utf-8 -*-
import sys
from sbimt.sbimt import SBIMT
from sbimt.user import User
import argparse


def parse_args():
    parser = argparse.ArgumentParser(description='Taking a test to translate, \
                                     its reference file, the Moses init file \
                                     of a trained system and an HMM alignment \
                                     model; this software simulates a user \
                                     working on a segment-based IMT \
                                     framework.')
    parser.add_argument('-s', '--sources', metavar='source_file',
                        required=True, help='file containing the source \
                        segments.')
    parser.add_argument('-r', '--references', metavar='reference_file',
                        required=True, help='file containing the reference\
                        segments.')
    parser.add_argument('-c', '--config', metavar='moses_ini',
                        required=True, help='file containing moses\
                        configuration.')
    parser.add_argument('-a', '--alignments', metavar='alignments_file',
                        required=True, help='file containing the alignments\
                        generated by alignments.sh')
    parser.add_argument('-v', '--verbose', default=False,
                        action='store_true', required=False, help='Activate \
                        verbose mode.')
    parser.add_argument('-x', '--xml', default=False,
                        action='store_true', required=False, help='Show \
                        XML markup.')
    parser.add_argument('-p', '--probability', metavar='threshold',
                        required=False, type=float, help='probability \
                        threshold. (Default 0.)', default=0)

    return parser.parse_args()


if __name__ == "__main__":
    """
    Start of the simulation.
    """

    # Check arguments.
    args = parse_args()

    # Session set-up.
    sys.stderr.write("\x1b[2J\x1b[H")
    sys.stderr.write('Preparing systems  (it may take a while)...\n')
    session = SBIMT(args.config, args.alignments, args.probability)
    reference_file = open(args.references, 'r')
    total_sentences = 0
    for s in open(args.sources):
        total_sentences += 1
    current_sentence = 1

    # IMT session (sentence by sentence).
    for source in open(args.sources):

        # Data initialization.
        reference = reference_file.readline().strip().split()
        sim = User(reference)

        # Show progess.
        sys.stderr.write("\x1b[2J\x1b[H")
        sys.stderr.write('Progress: ' + str(current_sentence) + '/'
                         + str(total_sentences)
                         + ' [' + "{0:.2f}".format(current_sentence
                                                   / float(total_sentences)
                                                   * 100) + ' %]\n')
        current_sentence += 1

        # Session initialization.
        session.newSentence(source.split())
        validated_translation = False

        if args.verbose:
            print('SOURCE: ' + source.strip())
            print('REFERENCE: ' + ' '.join(reference))

        # Iterative process.
        while not validated_translation:

            # Load new hypothesis.
            session.newHypothesis()

            if args.verbose:
                print('TRANSLATION:', session.getTranslation())

            # Check if new hypothesis is the desired translation.
            if session.getTranslation() == ' '.join(reference):
                session.validateTranslation()
                validated_translation = True
                continue

            # Segment Validation.
            sim.validateSegments(session)

            # Segment Merging.
            sim.mergeSegments(session)

            # Word Correction / Sentence Validation.
            new_word = sim.wordCorrection(session)

            if new_word == '':
                session.validateTranslation()
                if args.verbose:
                    print('')
                    print('')
                    print('CORRECTED WORD: ')
                    print('WORD SEGMENTS:', session.getWordSegments())
                    print('DELETED WORDS:', session.getDeletedWords())
                    print('')
                break

            # XML Generation.
            session.generateXML()

            if args.verbose:
                print('')
                print('')
                print('CORRECTED WORD:',  new_word)
                print('WORD SEGMENTS:', session.getWordSegments())
                print('DELETED WORDS:', session.getDeletedWords())
                print('')
                if args.XML:
                    print('XML:', session.getXML())

        if args.verbose:
            print('')
            print('Word Strokes: ', session.getWordStrokes())
            print('Mouse Actions:', session.getMouseActions())

            print("-----------------------------------------")
            print('')

    # Show metrics.
    print('WSR:', "{0:.1f}".format(session.getWSR()))
    print('MAR:', "{0:.1f}".format(session.getMAR()))
    print('WDR:', "{0:.1f}".format(session.getWDR()))
